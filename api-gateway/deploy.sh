#!/bin/bash

echo "üåê DEPLOY DO API GATEWAY SOAT FIAP"
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "main.tf" ]; then
    error "Arquivo main.tf n√£o encontrado. Execute o script do diret√≥rio api-gateway/"
    exit 1
fi

log "Verificando pr√©-requisitos..."

# Verificar se kubectl est√° funcionando
if ! kubectl cluster-info &> /dev/null; then
    error "Kubernetes cluster n√£o acess√≠vel. Verifique sua configura√ß√£o do kubectl."
    exit 1
fi

# Verificar se os servi√ßos SOAT est√£o rodando
log "Verificando servi√ßos SOAT no EKS..."

USER_MS=$(kubectl get service soat-fiap-user-application-ms --no-headers 2>/dev/null | wc -l)
PROCESS_MS=$(kubectl get service soat-fiap-process-manager-application-ms --no-headers 2>/dev/null | wc -l)

if [ "$USER_MS" -eq 0 ]; then
    error "Servi√ßo soat-fiap-user-application-ms n√£o encontrado no EKS"
    exit 1
fi

if [ "$PROCESS_MS" -eq 0 ]; then
    error "Servi√ßo soat-fiap-process-manager-application-ms n√£o encontrado no EKS"
    exit 1
fi

success "Servi√ßos SOAT encontrados no EKS ‚úì"

# Mostrar informa√ß√µes dos servi√ßos
log "Informa√ß√µes dos servi√ßos:"
kubectl get services | grep soat | while read line; do
    echo "  üìã $line"
done

# Verificar credenciais AWS
log "Verificando credenciais AWS..."
if ! aws sts get-caller-identity &> /dev/null; then
    error "Credenciais AWS n√£o configuradas ou inv√°lidas"
    exit 1
fi

success "Credenciais AWS v√°lidas ‚úì"

# Inicializar Terraform se necess√°rio
if [ ! -d ".terraform" ]; then
    log "Inicializando Terraform..."
    terraform init
    if [ $? -ne 0 ]; then
        error "Falha na inicializa√ß√£o do Terraform"
        exit 1
    fi
fi

# Executar terraform plan
log "Executando terraform plan..."
terraform plan -out=tfplan
if [ $? -ne 0 ]; then
    error "Falha no terraform plan"
    exit 1
fi

# Perguntar confirma√ß√£o
echo ""
warning "‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° criar recursos na AWS que podem gerar custos."
read -p "Deseja prosseguir com o deploy? (y/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log "Deploy cancelado pelo usu√°rio"
    exit 0
fi

# Aplicar terraform
log "Aplicando configura√ß√£o do Terraform..."
terraform apply tfplan
if [ $? -ne 0 ]; then
    error "Falha no terraform apply"
    exit 1
fi

# Obter outputs
log "Obtendo informa√ß√µes do API Gateway criado..."
echo ""
success "üéâ API Gateway criado com sucesso!"
echo ""

echo "üìã INFORMA√á√ïES DO API GATEWAY:"
echo "=============================="
echo ""

API_URL=$(terraform output -raw api_gateway_url 2>/dev/null)
if [ ! -z "$API_URL" ]; then
    echo "üåê URL Principal: $API_URL"
else
    echo "‚ùå N√£o foi poss√≠vel obter a URL do API Gateway"
fi

echo ""
echo "üì° ENDPOINTS DISPON√çVEIS:"
echo "========================"
terraform output user_ms_endpoint 2>/dev/null && echo "   ‚îî‚îÄ‚îÄ Microservi√ßo de Usu√°rios"
terraform output process_manager_ms_endpoint 2>/dev/null && echo "   ‚îî‚îÄ‚îÄ Microservi√ßo de Processos"
terraform output user_health_endpoint 2>/dev/null && echo "   ‚îî‚îÄ‚îÄ Health Check - Usu√°rios"
terraform output process_health_endpoint 2>/dev/null && echo "   ‚îî‚îÄ‚îÄ Health Check - Processos"

echo ""
echo "üîç TESTES R√ÅPIDOS:"
echo "=================="
if [ ! -z "$API_URL" ]; then
    echo "# Testar health checks:"
    echo "curl $API_URL/health/users"
    echo "curl $API_URL/health/process"
    echo ""
    echo "# Testar APIs:"
    echo "curl $API_URL/api/users"
    echo "curl $API_URL/api/process"
fi

echo ""
echo "üìä MONITORAMENTO:"
echo "================"
echo "CloudWatch Logs: /aws/apigateway/soat-fiap-api"
echo "AWS Console: https://console.aws.amazon.com/apigateway/"

echo ""
success "‚úÖ Deploy do API Gateway conclu√≠do com sucesso!"
warning "üí° Lembre-se: Os recursos criados na AWS podem gerar custos."

# Limpar arquivo de plan
rm -f tfplan